{"version":3,"file":"alldetails.min.js","sources":["../src/alldetails.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module alldetails\n *\n * @module     block_coursesinfo/alldetails\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalForm from 'core_form/modalform';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport { get_string as getString } from 'core/str';\nimport * as Str from 'core/str';\n\nconst Selectors = {\n    actions: {\n\n        allteachers: '[data-action=\"allteachers\"]',\n        allstudents: '[data-action=\"allstudents\"]',\n    },\n};\nexport const init = () => {\n    document.addEventListener('click', function (e) {\n\n        let allteachers = e.target.closest(Selectors.actions.allteachers);\n        if (allteachers) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            const Teachers = allteachers.getAttribute(\"data-id\");\n            // eslint-disable-next-line promise/catch-or-return, promise/always-return\n            Str.get_string('details', 'block_coursesinfo', Teachers).then(function () {\n                ModalFactory.create({\n                    title: getString(\"allteachers\", \"block_coursesinfo\"),\n                    body: Teachers,\n                }).done(\n                    function (modal) {\n                        // Keep a reference to the modal.\n                        self.modal = modal;\n                        // We want to reset the form every time it is opened.\n                        self.modal.getRoot().on(ModalEvents.hidden, function () {\n                            // Self.modal.setBody('');\n                            self.modal.hide();\n                            self.modal.destroy();\n                        }.bind(this));\n                        // We want to reset the form every time it is opened.\n                        self.modal.getRoot().on(ModalEvents.cancel, function () {\n                            // Self.modal.setBody('');\n                            self.modal.hide();\n                            self.modal.destroy();\n                        }.bind(this));\n                        self.modal.show();\n                    }\n                );\n            });\n        }\n\n        let allstudents = e.target.closest(Selectors.actions.allstudents);\n        if (allstudents) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            const Students = allstudents.getAttribute(\"data-id\");\n\n            // eslint-disable-next-line promise/catch-or-return, promise/always-return\n            Str.get_string('details', 'block_coursesinfo', Students).then(function () {\n                ModalFactory.create({\n                    title: getString(\"allstudents\", \"block_coursesinfo\"),\n                    body: Students,\n                }).done(\n                    function (modal) {\n                        // Keep a reference to the modal.\n                        self.modal = modal;\n                        // We want to reset the form every time it is opened.\n                        self.modal.getRoot().on(ModalEvents.hidden, function () {\n                            // Self.modal.setBody('');\n                            self.modal.hide();\n                            self.modal.destroy();\n                        }.bind(this));\n                        // We want to reset the form every time it is opened.\n                        self.modal.getRoot().on(ModalEvents.cancel, function () {\n                            // Self.modal.setBody('');\n                            self.modal.hide();\n                            self.modal.destroy();\n                        }.bind(this));\n                        self.modal.show();\n                    }\n                );\n            });\n        }\n\n    });\n};"],"names":["Selectors","allteachers","allstudents","document","addEventListener","e","target","closest","preventDefault","stopImmediatePropagation","Teachers","getAttribute","Str","get_string","then","create","title","body","done","modal","self","getRoot","on","ModalEvents","hidden","hide","destroy","bind","this","cancel","show","Students"],"mappings":";;;;;;;s9BA8BMA,kBACO,CAELC,YAAa,8BACbC,YAAa,6CAGD,KAChBC,SAASC,iBAAiB,SAAS,SAAUC,OAErCJ,YAAcI,EAAEC,OAAOC,QAAQP,kBAAkBC,gBACjDA,YAAa,CACbI,EAAEG,iBACFH,EAAEI,iCACIC,SAAWT,YAAYU,aAAa,WAE1CC,IAAIC,WAAW,UAAW,oBAAqBH,UAAUI,MAAK,kCAC7CC,OAAO,CAChBC,OAAO,kBAAU,cAAe,qBAChCC,KAAMP,WACPQ,MACC,SAAUC,OAENC,KAAKD,MAAQA,MAEbC,KAAKD,MAAME,UAAUC,GAAGC,sBAAYC,OAAQ,WAExCJ,KAAKD,MAAMM,OACXL,KAAKD,MAAMO,WACbC,KAAKC,OAEPR,KAAKD,MAAME,UAAUC,GAAGC,sBAAYM,OAAQ,WAExCT,KAAKD,MAAMM,OACXL,KAAKD,MAAMO,WACbC,KAAKC,OACPR,KAAKD,MAAMW,iBAMvB5B,YAAcG,EAAEC,OAAOC,QAAQP,kBAAkBE,gBACjDA,YAAa,CACbG,EAAEG,iBACFH,EAAEI,iCACIsB,SAAW7B,YAAYS,aAAa,WAG1CC,IAAIC,WAAW,UAAW,oBAAqBkB,UAAUjB,MAAK,kCAC7CC,OAAO,CAChBC,OAAO,kBAAU,cAAe,qBAChCC,KAAMc,WACPb,MACC,SAAUC,OAENC,KAAKD,MAAQA,MAEbC,KAAKD,MAAME,UAAUC,GAAGC,sBAAYC,OAAQ,WAExCJ,KAAKD,MAAMM,OACXL,KAAKD,MAAMO,WACbC,KAAKC,OAEPR,KAAKD,MAAME,UAAUC,GAAGC,sBAAYM,OAAQ,WAExCT,KAAKD,MAAMM,OACXL,KAAKD,MAAMO,WACbC,KAAKC,OACPR,KAAKD,MAAMW"}